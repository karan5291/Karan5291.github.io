grep("fiscal",names(edudata))
grepl("fiscal",names(edudata))
names(fiscal)
names(edudata)
grepl("Fiscal",names(edudata))
grep("Fiscal",names(edudata))
grep("Fiscal",edudata)
head(edudata)
edudata <- read.csv("ass4.csv")
edudata
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
str(sampleTimes)
library(lubridate)
ymd(sampleTimes)
count(ymd(sampleTimes >= ymd(2012-01-01) AND ymd(sampleTimes <= ymd(2012-12-31))
data <- (ymd(sampleTImes))
data <- ymd(sampleTImes)
data <- ymd(sampleTimes)
year(data)
year(data)[year(data) = 2012]
year(data)[year(data) == 2012]
count(year(data)[year(data) == 2012])
length((year(data)[year(data) == 2012])
)
library(help = lubridate)
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(40,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(1000)))
```
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(40,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(1000)))
```
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(1000)))
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(40,lambda)))
}
msn = null
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(40,lambda)))
}
msn = null
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
mns= null
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
mns= null
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
lambda = 0.2
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
lambda = 0.2
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(1000)))
```
std(msn)
sd(mns)
?sqrt(1000)
sd(mns) * sqrt(1000)
var(rexp(40,0.2))
var(rexp(400,0.2))
var(rexp(40000,0.2))
var(rexp(400000,0.2))
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
lambda = 0.2
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40000,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(1000)))
```
var(mns)
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
lambda = 0.2
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(40)))
```
---
title: "Relation between population statistics and sample statistics"
author: "Karl Andersson"
date: "Wednesday, March 11, 2015"
output: pdf_document
---
##Overveiw
This report outlines some facts about the the relationship a population's statistics and a the statistics of a sample of the populatio. A simulation is made to empiracally prove these relationships.
##Simulations
Simulations were carried out by generating the mean of 40 observations drawn from a exponantially distributed population with lamda = 0.2. This operation is repeated 1000 times to get a vector with 1000 sample means.
```{r}
lambda = 0.2
mns= NULL
for (i in 1 : 1000) {
mns= c(mns, mean(rexp(40,lambda)))
}
```
##Sample Mean versus Theoretical Mean
We can se that the the mean of the sample means are very close to the theoretical mean of the pupulation.Remember that lambda was set to 0.2.
```{r}
cat(sprintf('Theoretical Mean of Distribution= 1/ lamda = %f', 1/lambda))
cat(sprintf('Sample mean(1000 samples) = %f', mean(mns)))
```
##Sample Variance versus Theoretical Variance
The variation of the sample mean is much smaller than the variance of the total population
```{r}
cat(sprintf('Sample variance = 1/ lamda = %f', var(mns)))
cat(sprintf('Teoretical variance of distribution = (1/lamda)^2 = %f' ,((lambda)^-2)))
cat(sprintf('Population variance / Sample variance = %f', (lambda^-2)/var(mns)))
cat(sprintf('Square root of 1000 = %f',sqrt(40)))
```
##Sample Mean aprox. normal distributed
The Means are nrmally distributed
```{r}
hist(mns)
```
THe original enponential distribution is not normally distributed
```{r}
hist(rexp(40,0.2))
```
hist(rexp(40,0.2) breaks = 50)
hist(rexp(40,0.2), breaks = 50)
hist(rexp(40000,0.2), breaks = 50)
load(ToohtData)
load(ToohtGroth)
load(ToohtGrowth)
load(ToothGrowth)
data(ToothGrowth)
str(toothGrowth)
str(data)
names(data)
data <- data(ToothGrowth)
str(data)
names(data)
data(ToothGrowth)
summary(data)
str(data)
library(Datasets)
library(datasets)
data(ToothGrowth)
str(Data)
str(data)
data <- ToothGrowth
str(data)
plot(len ~ dose)
plot(len ~ dose, data=data)
barplot(len ~dose, data=Data)
barplot(len ~dose, data=data)
barplot(len ~levels(dose), data=data)
library(datasets)
library(ggplot2)
data <- ToothGrowth
ggplot(data = data, aes(y=len,x=dose), facet_grid(dose~.))
ggplot(data, aes(y=len,x=dose), facet_grid(dose~.))
ggplot(data, aes(y=len,x=dose))
data <- ToothGrowth
str(Data)
str(data)
ggplot(data, aes(y=len,x=dose), facet_grid(dose~.))
ggplot(data, aes(len,dose))
d <- ggplot(data, aes(y=len,x=dose), facet_grid(dose~.))
d
d + geom_line()
d + geom_bar()
d + geom_dot()
d + geom_point()
d + geom_boxplot()
d <- ggplot(data, aes(y=len,x=dose), facet_grid(supp ~.))
d <- ggplot(data, aes(y=len,x=dose), facet_grid(supp ~.))
d + geom_point()
d <- ggplot(data, aes(y=len,x=as.factor(dose), facet_grid(supp ~.))
d + geom_point()
d <- ggplot(data, aes(y=len,x=as.factor(dose)), facet_grid(supp ~.))
d + geom_point()
d <- ggplot(data, aes(y=len,x=as.factor(dose)))
d <- ggplot(data, aes(y=len,x=as.factor(dose)))
d + geom_point + facet_grid(. ~supp)
d <- ggplot(data, aes(y=len,x=as.factor(dose)))
d + geom_point() + facet_grid(. ~supp)
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
install.packages("AlzheimerDisease")
r
R
Version)=
Version()
version
install.packages("AlzeimerDisease")
install.packages("AlzheimerDisease")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
intall.packages("caret")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(AlzeimersDisease)
str(AlzheimersDisease)
str(data)
str(training)
data = training[names(training) %in% 'IL']
data
data = training[,names(training) %in% 'IL']
data
names/training
names(training)
require(dplyr
)
install.packages("dplyr")
require(dplyr)
select(training, grepl("LM",colnames(training)))
select(training,contains("LM"))
select(training,contains("IL"))
data = select(training,contains("IL"))
preOb = preProcess(training)
preOb = preProcess(data)
sum(preOb)
summary(preOb)
?preProcess
preProcess(data,method = c("center", "scale"),
thresh = 0.95)
summary(preProcess(data,method = c("center", "scale"), )
thresh = 0.95)
summary(preProcess(data,method = c("center", "scale"),
thresh = 0.95)
)
?preProcess
summary(preProcess(data,method = c("pca"),
thresh = 0.95)
)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
summary(preProc)
preProc$rotation
names(data)
names(ss)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
nrow(training)
nrow(testing)
install.packages("devrools")
install.packages("devtools")
library("base64enc", lib.loc="~/R/win-library/3.2")
install.packages("rMaps")
library("base64enc", lib.loc="~/R/win-library/3.2")
install.packages(base64enc)
install.packages("base64enc")
install.packages("base64enc")
library("base64enc", lib.loc="~/R/win-library/3.2")
install.packages("rMaps")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("Rccp")
remove.packages("Rccp")
install.packages("dply")
install.packages("dplyr")
install.packages("dplyr")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rMaps', 'ramnathv')
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
dTable?
?dTable()
?dTable()
?dTable
install(rCharts)
require(rCharts)
?dTable
?dTable()
?dTable
dTable(airquality, sPaginationType = "full_numbers")
install_github("ramnathv/rCharts@dev")
dTable(airquality, sPaginationType = "full_numbers")
dTable
dTable()
?dTable
??dTable
install.packages(rTools)
install.packages("rTools")
install.packages("rtools")
Sys.getenv("PATH")
system("g++ -v")
system(" where make")
library(rCharts)
dTable
?dTable
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
require(devtools)
install_github('rCharts', 'ramnathv')
library(rTools)
A = {1,2,3,4}
A = [1,2,3,4]
A = (1,2,3,4)
A <- (1,2,3,4)
A <- c(40000,44900,41000,44100,40300,40000,38600,43600,42000,37500,40200,43500,35000)
?quantile
quantile(A,c(10))
quantile(A,c(0.10))
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
install.packages("pwr")
pwr.t.test?
)()
?pwr.t.test
?pwr.t.test()
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
?pwr.t.test(n=100,d=1.75,sig.level=0.95,type='paired')
pwr.t.test(n=100,d=1.75,sig.level=0.95,type="paired")
pwr.t.test(n=10,d=1.75,sig.level=0.95,type="paired")
pwr.t.test(n=10,d=0.75,sig.level=0.95,type="paired")
pwr.t.test(n=10,d=0.75,sig.level=0.95,type="paired")$power
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
shiny::runApp('Data Science Johns Hopkins/Creating Data Products/My-App1')
setwd("~/Data Science Johns Hopkins/Creating Data Products")
library(shinyapps)
library(shinyapps)
shinyapps::deployApp('my-App1')
setwd("~/Data Science Johns Hopkins/Creating Data Products/myDeck")
publish(user="karan5291",repo = "CourseraDataScience/Creating_Data_Products/My-App1")
library(slidify)
publish(user="karan5291",repo = "CourseraDataScience/Creating_Data_Products/My-App1")
publish(user="karan5291",repo = "karan5291/CourseraDataScience/tree/master/Creating_Data_Products/My-App1")
publish(user="karan5291",repo = "karan5291/CourseraDataScience/tree/master/Creating_Data_Products/My-App1")
publish(user="karan5291",repo = "")
publish(user="karan5291",repo = "")
publish(user="karan5291",repo = "karan5291.github.io")
publish(user="karan5291",repo = "git@github.com:karan5291/karan5291.github.io.git")
